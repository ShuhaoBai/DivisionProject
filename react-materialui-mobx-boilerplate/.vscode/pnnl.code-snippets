{
  // Place your cra-boiler-plate workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Class Component": {
    "scope": "typescriptreact",
    "prefix": "pnnl-class-component",
    "body": [
      "// NPM packages",
      "import React from 'react';",
      "import clsx from 'clsx';",
      "import { createStyles, withStyles, WithStyles } from '@material-ui/core/styles';",
      "import { observer } from 'mobx-react';",
      "",
      "// All other imports",
      "import { withServices } from 'services';",
      "import Services from 'services/Services';",
      "",
      "// eslint-disable-next-line @typescript-eslint/explicit-function-return-type",
      "const styles = () =>",
      "\tcreateStyles({",
      "\t\troot: {},",
      "});",
      "",
      "export interface ${1:ComponentName}Props extends WithStyles<typeof styles> {",
      "\tclassName?: string;",
      "}",
      "",
      "class ${1} extends React.Component<",
      "${1}Props & { services: Services }",
      "> {",
      "\trender(): React.ReactNode {",
      "\t\tconst { classes, className, services } = this.props;",
      "\t\treturn (",
      "\t\t\t<div className={clsx(classes.root, className)}>",
      "\t\t\t\tHello from ${1}",
      "\t\t\t</div>",
      "\t\t);",
      "\t}",
      "}",
      "",
      "export default withStyles(styles)(withServices(observer(${1})));"
    ]
  },
  "Functional Component": {
    "scope": "typescriptreact",
    "prefix": "pnnl-functional-component",
    "body": [
      "// NPM packages",
      "import React from 'react';",
      "import clsx from 'clsx';",
      "import { makeStyles } from '@material-ui/core/styles';",
      "import { useObserver } from 'mobx-react';",
      "",
      "// All other imports",
      "import { useServices } from 'services';",
      "import { UseStyles } from 'styles/utilityTypes';",
      "",
      "// eslint-disable-next-line @typescript-eslint/explicit-function-return-type",
      "const useStyles = makeStyles(() => ({",
      "\troot: {},",
      "}));",
      "",
      "export interface ${1:ComponentName}Props extends UseStyles<typeof useStyles> {",
      "\tclassName?: string;",
      "}",
      "",
      "export default function ${1}(props: ${1}Props): React.ReactElement | null {",
      "\tconst { className } = props;",
      "\tconst classes = useStyles(props);",
      "\tconst {} = useServices();",
      "\treturn useObserver(() => (",
      "\t\t<div className={clsx(classes.root, className)}>",
      "\t\t\tHello From ${1}",
      "\t\t</div>",
      "\t));",
      "};",
      ""
    ]
  },
  "Component Test": {
    "scope": "typescriptreact",
    "prefix": "pnnl-coponent-test",
    "body": [
      "import React from 'react';",
      "import { render } from 'test-utils';",
      "",
      "import ${1:ComponentUnderTest} from '../${1}';",
      "",
      "it('${2:does something}', () => {",
      "\t// Arrange here",
      "\tconst {getByText} = render(<${1:arrange} />)",
      "",
      "\t// Act here",
      "",
      "\t// Assert here",
      "\texpect(true).toBe(true);",
      "})"
    ]
  }
}
